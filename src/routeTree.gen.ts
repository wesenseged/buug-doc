/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NewImport } from './routes/new'
import { Route as IntroImport } from './routes/intro'
import { Route as InstallationImport } from './routes/installation'
import { Route as FaqImport } from './routes/faq'
import { Route as IndexImport } from './routes/index'
import { Route as GuideIndexImport } from './routes/guide/index'
import { Route as GuideMarkdownImport } from './routes/guide/markdown'

// Create/Update Routes

const NewRoute = NewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => rootRoute,
} as any)

const IntroRoute = IntroImport.update({
  id: '/intro',
  path: '/intro',
  getParentRoute: () => rootRoute,
} as any)

const InstallationRoute = InstallationImport.update({
  id: '/installation',
  path: '/installation',
  getParentRoute: () => rootRoute,
} as any)

const FaqRoute = FaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GuideIndexRoute = GuideIndexImport.update({
  id: '/guide/',
  path: '/guide/',
  getParentRoute: () => rootRoute,
} as any)

const GuideMarkdownRoute = GuideMarkdownImport.update({
  id: '/guide/markdown',
  path: '/guide/markdown',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqImport
      parentRoute: typeof rootRoute
    }
    '/installation': {
      id: '/installation'
      path: '/installation'
      fullPath: '/installation'
      preLoaderRoute: typeof InstallationImport
      parentRoute: typeof rootRoute
    }
    '/intro': {
      id: '/intro'
      path: '/intro'
      fullPath: '/intro'
      preLoaderRoute: typeof IntroImport
      parentRoute: typeof rootRoute
    }
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewImport
      parentRoute: typeof rootRoute
    }
    '/guide/markdown': {
      id: '/guide/markdown'
      path: '/guide/markdown'
      fullPath: '/guide/markdown'
      preLoaderRoute: typeof GuideMarkdownImport
      parentRoute: typeof rootRoute
    }
    '/guide/': {
      id: '/guide/'
      path: '/guide'
      fullPath: '/guide'
      preLoaderRoute: typeof GuideIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/faq': typeof FaqRoute
  '/installation': typeof InstallationRoute
  '/intro': typeof IntroRoute
  '/new': typeof NewRoute
  '/guide/markdown': typeof GuideMarkdownRoute
  '/guide': typeof GuideIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/faq': typeof FaqRoute
  '/installation': typeof InstallationRoute
  '/intro': typeof IntroRoute
  '/new': typeof NewRoute
  '/guide/markdown': typeof GuideMarkdownRoute
  '/guide': typeof GuideIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/faq': typeof FaqRoute
  '/installation': typeof InstallationRoute
  '/intro': typeof IntroRoute
  '/new': typeof NewRoute
  '/guide/markdown': typeof GuideMarkdownRoute
  '/guide/': typeof GuideIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/faq'
    | '/installation'
    | '/intro'
    | '/new'
    | '/guide/markdown'
    | '/guide'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/faq'
    | '/installation'
    | '/intro'
    | '/new'
    | '/guide/markdown'
    | '/guide'
  id:
    | '__root__'
    | '/'
    | '/faq'
    | '/installation'
    | '/intro'
    | '/new'
    | '/guide/markdown'
    | '/guide/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FaqRoute: typeof FaqRoute
  InstallationRoute: typeof InstallationRoute
  IntroRoute: typeof IntroRoute
  NewRoute: typeof NewRoute
  GuideMarkdownRoute: typeof GuideMarkdownRoute
  GuideIndexRoute: typeof GuideIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FaqRoute: FaqRoute,
  InstallationRoute: InstallationRoute,
  IntroRoute: IntroRoute,
  NewRoute: NewRoute,
  GuideMarkdownRoute: GuideMarkdownRoute,
  GuideIndexRoute: GuideIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/faq",
        "/installation",
        "/intro",
        "/new",
        "/guide/markdown",
        "/guide/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/faq": {
      "filePath": "faq.tsx"
    },
    "/installation": {
      "filePath": "installation.tsx"
    },
    "/intro": {
      "filePath": "intro.tsx"
    },
    "/new": {
      "filePath": "new.tsx"
    },
    "/guide/markdown": {
      "filePath": "guide/markdown.tsx"
    },
    "/guide/": {
      "filePath": "guide/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
